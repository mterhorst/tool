name: Publish Native AOT + Docker Image

on: [workflow_dispatch]

permissions:
  contents: write
  packages: write 

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - run: dotnet restore

      - run: |
          dotnet publish ToolManager/ToolManager.csproj \
            -c Release \
            -p:PublishAot=true \
            -p:PublishSingleFile=true \
            -p:SelfContained=true \
            -r linux-x64 \
            -o publish/linux-x64

      - run: |
          cd publish/linux-x64
          zip -r ../../ToolManager-linux-x64.zip .
          cd ../../

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: ToolManager-linux-x64
          path: ToolManager-linux-x64.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-linux

    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: ToolManager-linux-x64

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ToolManager-linux-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-linux

    steps:
      - uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: ToolManager-linux-x64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/toolmanager:latest
          
          mkdir docker-build
          unzip ToolManager-linux-x64.zip -d docker-build/
          
          cat > docker-build/Dockerfile <<EOF
          FROM debian:bullseye-slim
          WORKDIR /app
          COPY . .
          CMD ["./ToolManager"]
          EOF

          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t $IMAGE_NAME \
            docker-build
